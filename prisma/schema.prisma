// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id         String   @id @default(uuid())
  year       String
  title      String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  students             Student[]
  SemesterRegistration SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt()
  academicDepartments AcademicDepartment[]

  students  Student[]
  faculties Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  students  Student[]
  faculties Faculty[]

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  offerdCourses     OfferdCourse[]

  @@map("academic_departments")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  middleName   String
  lastName     String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId           String
  courses                     courseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  middleName   String
  lastName     String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty              AcademicFaculty               @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId            String
  studentSemesterRegistrations StudentSemesterRegistration[]

  @@map("students")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  building                    Building                     @relation(fields: [buildingId], references: [id])
  buildingId                  String
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id      String @id @default(uuid())
  title   String
  code    String
  credits Int    @default(0)

  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt()
  Prerequisite    CourseToPrerequisite[] @relation("courseToPrerequisite")
  PrerequisiteFor CourseToPrerequisite[] @relation("prerequisiteToCourse")
  faculties       courseFaculty[]
  offerdCourses   OfferdCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "courseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "prerequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model courseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
}

model SemesterRegistration {
  id                           String                        @id @default(uuid())
  startDate                    DateTime
  endDate                      DateTime
  status                       SemesterRegistrationStatus?   @default(UPCOMING)
  minCredit                    Int                           @default(0)
  maxCredit                    Int                           @default(0)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt()
  academicSemesterId           String
  academicSemester             AcademicSemester              @relation(fields: [academicSemesterId], references: [id])
  offerdCourses                OfferdCourse[]
  offeredCourseSections        OfferedCourseSection[]
  offeredCourseClassSchedules  OfferedCourseClassSchedule[]
  studentSemesterRegistrations StudentSemesterRegistration[]

  @@map("semester_registration")
}

model OfferdCourse {
  id                     String                 @id @default(uuid())
  courseId               String
  course                 Course                 @relation(fields: [courseId], references: [id])
  academicDepartmentId   String
  academicDepartment     AcademicDepartment     @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offerd_courses")
}

model OfferedCourseSection {
  id                          String                       @id @default(uuid())
  title                       String
  maxCapacity                 Int
  currentlyEnrolledStudent    Int                          @default(0)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt()
  offeredCourseId             String
  OfferedCourse               OfferdCourse                 @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId      String
  SemesterRegistration        SemesterRegistration         @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("offered_course_section")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt()
  offeredCourseSectionId String
  OfferedCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  SemesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  Room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  Faculty                Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirm              Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt()
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registration")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
